{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-25T06:08:46.932Z",
    "end": "2024-04-25T06:08:46.946Z",
    "duration": 14,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4e9b4e09-2596-4824-90aa-4908a72f5bd9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6fece18a-80b8-4a4b-bb49-63487aef4db3",
          "title": "getEvenNumbersFromArray",
          "fullFile": "C:\\Users\\szymo\\Desktop\\EPAM\\repos\\AT\\FirstProject\\test\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator()",
              "err": {},
              "uuid": "d79f07bc-ddc1-4944-baeb-6dc0844f2e4c",
              "parentUUID": "6fece18a-80b8-4a4b-bb49-63487aef4db3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null",
              "err": {},
              "uuid": "bb5d6d08-4c11-4492-a92d-ff58e6bb44fa",
              "parentUUID": "6fece18a-80b8-4a4b-bb49-63487aef4db3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all even numbers in array",
              "fullTitle": "getEvenNumbersFromArray should return all even numbers in array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrOfNums = [4, 3, 2]\nexpect(validator.getEvenNumbersFromArray(arrOfNums)).to.be.eql([4, 2])",
              "err": {},
              "uuid": "cc5968a3-a35f-480a-95db-bea57f5be050",
              "parentUUID": "6fece18a-80b8-4a4b-bb49-63487aef4db3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should provide an error when provided a strings in array",
              "fullTitle": "getEvenNumbersFromArray should provide an error when provided a strings in array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([4, '3', '2'])\n}).to.throw('[4,3,2] is not an array of \"Numbers\"')",
              "err": {},
              "uuid": "18453cca-ccf6-4f77-bba8-c0346e1e69f7",
              "parentUUID": "6fece18a-80b8-4a4b-bb49-63487aef4db3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc5968a3-a35f-480a-95db-bea57f5be050",
            "18453cca-ccf6-4f77-bba8-c0346e1e69f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
          "title": "isAllNumbers",
          "fullFile": "C:\\Users\\szymo\\Desktop\\EPAM\\repos\\AT\\FirstProject\\test\\isAllNumbers.spec.js",
          "file": "\\test\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator()",
              "err": {},
              "uuid": "23701dd5-e5e0-426b-82f4-877e546f37ea",
              "parentUUID": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null",
              "err": {},
              "uuid": "e237d3f9-98f9-4656-909f-9e27799e335f",
              "parentUUID": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "returns true if all elements are numbers",
              "fullTitle": "isAllNumbers returns true if all elements are numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrOfNums = [4, 3, 2]\nexpect(validator.isAllNumbers(arrOfNums)).to.be.equal(true)",
              "err": {},
              "uuid": "3babb641-9678-4baf-b4f0-1d60e91d77b9",
              "parentUUID": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns false if not all elements are numbers",
              "fullTitle": "isAllNumbers returns false if not all elements are numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrOfNums = [4, '3', 2]\nexpect(validator.isAllNumbers(arrOfNums)).to.be.equal(false)",
              "err": {},
              "uuid": "2eea6328-06a9-4b18-b0cc-b1ce71f4594a",
              "parentUUID": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "throws an error if input is not an array",
              "fullTitle": "isAllNumbers throws an error if input is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidInput = 'input'\nexpect(() => validator.isAllNumbers(invalidInput)).to.throw(\n        `[${invalidInput}] is not an array`\n)",
              "err": {},
              "uuid": "c78bc6fd-4882-4537-b185-71f94b9c68f3",
              "parentUUID": "18a95fc9-1e71-4349-9d95-3ae4a2d6cce0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3babb641-9678-4baf-b4f0-1d60e91d77b9",
            "2eea6328-06a9-4b18-b0cc-b1ce71f4594a",
            "c78bc6fd-4882-4537-b185-71f94b9c68f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
          "title": "isInteger",
          "fullFile": "C:\\Users\\szymo\\Desktop\\EPAM\\repos\\AT\\FirstProject\\test\\isInteger.spec.js",
          "file": "\\test\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator()",
              "err": {},
              "uuid": "902c013b-7d62-4ed2-83dd-d194600ce142",
              "parentUUID": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null",
              "err": {},
              "uuid": "bbeeb4fc-7a64-4023-9585-dac02df704fd",
              "parentUUID": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "returns true if number is valid integer",
              "fullTitle": "isInteger returns true if number is valid integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(1)).to.be.equal(true)",
              "err": {},
              "uuid": "51182c14-7c99-4728-a2ad-90b6b78d9a42",
              "parentUUID": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns false if number is not valid integer",
              "fullTitle": "isInteger returns false if number is not valid integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(1.23)).to.be.equal(false)",
              "err": {},
              "uuid": "75ae0dba-66a1-4dc2-aab6-818ae77b19d1",
              "parentUUID": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "throws error if input is not a number",
              "fullTitle": "isInteger throws error if input is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidInput = 'Something'\nexpect(() => validator.isInteger(invalidInput)).to.throw(\n        `[${invalidInput}] is not a number`\n)",
              "err": {},
              "uuid": "bbca7cd3-5b17-4eb7-a0e1-e4a4c9b84571",
              "parentUUID": "e184fa91-6040-4f15-ac99-0a1491b1ae15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51182c14-7c99-4728-a2ad-90b6b78d9a42",
            "75ae0dba-66a1-4dc2-aab6-818ae77b19d1",
            "bbca7cd3-5b17-4eb7-a0e1-e4a4c9b84571"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "684bde45-81f7-4be6-aa45-f161ca4ad660",
          "title": "isNumberEven",
          "fullFile": "C:\\Users\\szymo\\Desktop\\EPAM\\repos\\AT\\FirstProject\\test\\isNumberEven.spec.js",
          "file": "\\test\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator()",
              "err": {},
              "uuid": "4b566b84-85a6-4dbf-bcd7-b8d765513c17",
              "parentUUID": "684bde45-81f7-4be6-aa45-f161ca4ad660",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null",
              "err": {},
              "uuid": "e667e7c4-5f40-44c0-b28b-b669696bf373",
              "parentUUID": "684bde45-81f7-4be6-aa45-f161ca4ad660",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven should return true if number is even",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(4)).to.be.equal(true)",
              "err": {},
              "uuid": "cb9f8005-95da-45c6-bc8c-02d776c46fd5",
              "parentUUID": "684bde45-81f7-4be6-aa45-f161ca4ad660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should provide an error when provided a string",
              "fullTitle": "isNumberEven should provide an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4')\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"')",
              "err": {},
              "uuid": "3a354a74-c5ca-4352-b117-f58a46bbc2ce",
              "parentUUID": "684bde45-81f7-4be6-aa45-f161ca4ad660",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb9f8005-95da-45c6-bc8c-02d776c46fd5",
            "3a354a74-c5ca-4352-b117-f58a46bbc2ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}